kc.tra <- kc.tra[order(kc.tra$idx),]
kc.tra[,-18]
kc.tra[, -ncol(kc.tra)]
-ncol(kc.tra)
kc.tra[, -1*ncol(kc.tra)]
kc.tra <- subset(kc.tra, select=-c(idx))
kc.tra <- subset(kc.tra, select=-c(idx)); head(kc.tra)
head(kc.tra)
kc.val <- subset(kc.val, select=-c(idx)); head(kc.val)
kc.tes <- subset(kc.tes, select=-c(idx)); head(kc.tes)
####################################################
## Logistic Regression(A_model)
####################################################
A_model <- glm(Buy~., kc.tra)
glm
head(kc.tra)
####################################################
## Logistic Regression(A_model)
####################################################
A_model <- glm(Buy~., kc.tra, family=binomial)
All_var <- formula(A_model)
summary(A_model)
All_var <- formula(A_model)
summary(A_model)
All_var
####################################################
## Data Preprocessing
####################################################
kc <- read.table('./KidCreative.csv', header=TRUE, sep=','); head(kc); dim(kc)
table(is.na(kc))
cn <- colnames(kc)
cn <- cn[-1]
cn[length(cn)+1] <- cn[1]
cn <- cn[-1]
cn
kc <- subset(kc, select=cn); head(kc)
kc$idx <- 1:nrow(kc); head(kc)
library(splitstackshape)
pSeed <- 12345
set.seed(pSeed)
kc.tra <- stratified(kc, 'Buy', 0.6)
kc.tra <- kc.tra[order(kc.tra$idx),]
kc.val <- stratified(kc.rest, 'Buy', 0.5)
kc.tes <- kc.rest[!kc.rest$idx %in% kc.val$idx,]
kc.tra <- subset(kc.tra, select=-c(idx)); head(kc.tra)
kc.val <- subset(kc.val, select=-c(idx)); head(kc.val)
kc.tes <- subset(kc.tes, select=-c(idx)); head(kc.tes)
table(kc.tra$Buy)
t <- table(kc.tra$Buy); t; t[1]/t[2]
t <- table(kc.tra$Buy); t; t[1]/t[2]
t <- table(kc.val$Buy); t; t[1]/t[2]
t <- table(kc.tes$Buy); t; t[1]/t[2]
####################################################
## Logistic Regression(A_model)
####################################################
A_model <- glm(Buy~., kc.tra, family=binomial)
All_var <- formula(A_model)
summary(A_model)
predTra <- predict(A_model, kc.tra, type='response')
predTra
head(predTra)
Predict.tra <- ifelse(predTra>=0.5, 1, 0)
table(Predict.tra)
cTab.tra <- table(Actual=kc.tra$Buy, Predict.tra)
cTab.tra
cTab.tra <- table(xActual=kc.tra$Buy, Predict.tra)
cTab.tra
cTab.tra <- table(Actual=kc.tra$Buy, Predict.tra)
####################################################
## Logistic Regression(A_model)
####################################################
install.packages('caret')
library(caret)
cTab.tra <- table(Actual=kc.tra$Buy, Predict.tra); Ctab.tra
cTab.tra <- table(Actual=kc.tra$Buy, Predict.tra); Ctab.tra
predTra <- predict(A_model, kc.tra, type='response')
Predict.tra <- ifelse(predTra>=0.5, 1, 0)
cTab.tra <- table(Actual=kc.tra$Buy, Predict.tra); Ctab.tra
cTab.tra <- table(Actual=kc.tra$Buy, Predict.tra); cTab.tra
t(cTab.tra)
cM.tra <- confusionMatrix(t(cTab.tra), positive='1'); cM.tra
cM.tra <- confusionMatrix(t(cTab.tra), positive='1');
install.packages('e1071')
cM.tra <- confusionMatrix(t(cTab.tra), positive='1');
cM.tra <- confusionMatrix(t(cTab.tra), positive='1'); cM.tra
cM.tra <- confusionMatrix(t(cTab.tra), positive='1'); cM.tra
cM.tra$overall
Accu.tra <- cM.tra$overall['Accuracy']
cat('\n')
cat('\n'); cTab.tra; Accu.tra
cTab.tra; Accu.tra
cat('\n'); cTab.tra; Accu.tra
predVal; <- predict(A_model, kc.val, type='response')
predVal <- predict(A_model, kc.val, type='response')
Predict.val <- ifelse(predVal>=0.5, 1, 0)
cTab.val <- table(Actual=kc.val$Buy, Predict.val); cTab.val
cM.val <- confusionMatrix(t(cTab.val), positive='1'); cM.val
cTab.val; Accu.val
Accu.val <- cM.val$overall['Accuracy']
cTab.val; Accu.val
####################################################
## Logistic Regression(F_model)
####################################################
startModel <- glm(Buy~1, kc.tra, family=binomial); startModel
####################################################
## Logistic Regression(S_model)
####################################################
startModel <- glm(Buy~1, kc.tra, family=binomial); startModel
summary(startModel)
s_Result <- step(startModel, direction='both', scope=All_var)
s_var <- as.formula(s_Result$call); s_var
S_model <- glm(s_var, kc.tra, family=binomial)
summary(S_model)
predTra <- predict(S_model, kc.tra, type='response')
Predict.tra <- ifelse(predTra>=0.5, 1, 0)
cTab.tra <- table(Actual=kc.tra$Buy, Predict.tra); cTab.tra
cM.tra <- confusionMatrix(t(cTab.tra), positive='1'); cM.tra
Accu.tra <- cM.tra$overall['Accuracy']
cTab.tra; Accu.tra
predVal <- predict(S_model, kc.val, type='response')
Predict.val <- ifelse(predVal>=0.5, 1, 0)
cTab.val <- table(Actual=kc.val$Buy, Predict.val); cTab.val
cM.val <- confusionMatrix(t(cTab.val), positive='1'); cM.val
Accu.val <- cM.val$overall['Accuracy']
cTab.val; Accu.val
A_model <- glm(Buy~., kc.tra, family=binomial)
All_var <- formula(A_model)
summary(A_model)
x<-0:29
x
y<-1.05^x
y
z<-y*200
z
zz<-as.integer(z)
zz
plot(zz)
plot(z,zz)
k<-data.frame(x,zz)
k
ss<-8500+6500*3+4500*6
ss
ss/19
1/6*1.2
5500/12
5500/12/12
1/12*3*1.2
5.5*1.5
8.25*50
k
5.5*1.5
k
colnames(kk)
colnames(k)
k$a<-k$zz*0.65
k$b<-k$zz*0.35
k
sum(k$a)
sum(k$b)
sum(k$a)*0.78
####################################################
## Data Preprocessing
####################################################
kc <- read.table('./KidCreative.csv', header=TRUE, sep=','); head(kc); dim(kc)
table(is.na(kc))
cn <- colnames(kc); cn
cn[length(cn)+1] <- cn[2]; cn
cn[length(cn)+1] <- cn[1]; cn
cn <- cn[c(-1,-2)]; cn
kc <- subset(kc, select=cn); head(kc)
colnames(kc)[ncol(kc)] <- 'idx'; head(kc)
####################################################
## Data Splitting
####################################################
install.packages('splitstackshape')
library(splitstackshape)
pSeed <- 12345
set.seed(pSeed)
kc.tra <- stratified(kc, 'Buy', 0.6)
## ONLY TEST for STRATIFIED SAMPLING
kc.tra <- kc.tra[order(kc.tra$idx),]
kc.rest <- kc[kc$idx %in% kc.tra$idx,]
kc.rest <- kc.rest[order(kc.rest$idx),]
table(kc.tra$idx == kc.rest$idx)
table(kc.tra$Income == kc.rest$Income)
## ONLY TEST for STRATIFIED SAMPLING
kc.rest <- kc[! kc$idx %in% kc.tra$idx,]
kc.val <- stratified(kc.rest, 'Buy', 0.5)
kc.tes <- kc.rest[! kc.rest$idx %in% kc.val$idx,]
kc.tra <- subset(kc.tra, select=-c(idx)); head(kc.tra)
kc.val <- subset(kc.val, select=-c(idx)); head(kc.val)
kc.tes <- subset(kc.tes, select=-c(idx)); head(kc.tes)
## ONLY TEST for STRATIFIED SAMPLING
t <- table(kc.tra$Buy); t; t[1]/t[2]
t <- table(kc.val$Buy); t; t[1]/t[2]
t <- table(kc.tes$Buy); t; t[1]/t[2]
## ONLY TEST for STRATIFIED SAMPLING
####################################################
## Logistic Regression(A_model)
####################################################
#install.packages('caret')
#install.packages('e1071')
library(caret)
A_model <- glm(Buy~., kc.tra, family=binomial)
All_var <- formula(A_model);
summary(A_model)
predTra <- predict(A_model, kc.tra, type='response')
Predict.tra <- ifelse(predTra>=0.5, 1, 0)
cTab.tra <- table(Actual=kc.tra$Buy, Predict.tra); cTab.tra
cM.tra <- confusionMatrix(t(cTab.tra), positive='1'); cM.tra
Accu.tra <- cM.tra$overall['Accuracy']
cTab.tra; Accu.tra
predVal <- predict(A_model, kc.val, type='response')
Predict.val <- ifelse(predVal>=0.5, 1, 0)
cTab.val <- table(Actual=kc.val$Buy, Predict.val); cTab.val
cM.val <- confusionMatrix(t(cTab.val), positive='1'); cM.val
Accu.val <- cM.val$overall['Accuracy']
cTab.val; Accu.val
####################################################
## Logistic Regression(S_model)
####################################################
startModel <- glm(Buy~1, kc.tra, family=binomial)
summary(startModel)
s_Result <- step(startModel, direction='both', scope=All_var)
s_var <- as.formula(s_Result$call); s_var
S_model <- glm(s_var, kc.tra, family=binomial)
summary(S_model)
predTra <- predict(S_model, kc.tra, type='response')
Predict.tra <- ifelse(predTra>=0.5, 1, 0)
cTab.tra <- table(Actual=kc.tra$Buy, Predict.tra); cTab.tra
cM.tra <- confusionMatrix(t(cTab.tra), positive='1'); cM.tra
Accu.tra <- cM.tra$overall['Accuracy']
cTab.tra; Accu.tra
predVal <- predict(S_model, kc.val, type='response')
Predict.val <- ifelse(predVal>=0.5, 1, 0)
cTab.val <- table(Actual=kc.val$Buy, Predict.val); cTab.val
cM.val <- confusionMatrix(t(cTab.val), positive='1'); cM.val
Accu.val <- cM.val$overall['Accuracy']
cTab.val; Accu.val
####################################################
## Data Preprocessing
####################################################
kc <- read.table('./KidCreative.csv', header=TRUE, sep=','); head(kc); dim(kc)
table(is.na(kc))
cn <- colnames(kc); cn
cn[length(cn)+1] <- cn[2]; cn
cn[length(cn)+1] <- cn[1]; cn
cn <- cn[c(-1,-2)]; cn
kc <- subset(kc, select=cn); head(kc)
colnames(kc)[ncol(kc)] <- 'idx'; head(kc)
####################################################
## Data Splitting
####################################################
#install.packages('splitstackshape')
library(splitstackshape)
pSeed <- 12345
set.seed(pSeed)
kc.tra <- stratified(kc, 'Buy', 0.6)
## ONLY TEST for STRATIFIED SAMPLING
kc.tra <- kc.tra[order(kc.tra$idx),]
kc.rest <- kc[kc$idx %in% kc.tra$idx,]
kc.rest <- kc.rest[order(kc.rest$idx),]
table(kc.tra$idx == kc.rest$idx)
table(kc.tra$Income == kc.rest$Income)
## ONLY TEST for STRATIFIED SAMPLING
kc.rest <- kc[! kc$idx %in% kc.tra$idx,]
kc.val <- stratified(kc.rest, 'Buy', 0.5)
kc.tes <- kc.rest[! kc.rest$idx %in% kc.val$idx,]
kc.tra <- subset(kc.tra, select=-c(idx)); head(kc.tra)
kc.val <- subset(kc.val, select=-c(idx)); head(kc.val)
kc.tes <- subset(kc.tes, select=-c(idx)); head(kc.tes)
## ONLY TEST for STRATIFIED SAMPLING
t <- table(kc.tra$Buy); t; t[1]/t[2]
t <- table(kc.val$Buy); t; t[1]/t[2]
t <- table(kc.tes$Buy); t; t[1]/t[2]
## ONLY TEST for STRATIFIED SAMPLING
####################################################
## Logistic Regression(A_model)
####################################################
#install.packages('caret')
#install.packages('e1071')
library(caret)
A_model <- glm(Buy~., kc.tra, family=binomial)
All_var <- formula(A_model);
summary(A_model)
predTra <- predict(A_model, kc.tra, type='response')
Predict.tra <- ifelse(predTra>=0.5, 1, 0)
cTab.tra <- table(Actual=kc.tra$Buy, Predict.tra); cTab.tra
cM.tra <- confusionMatrix(t(cTab.tra), positive='1'); cM.tra
Accu.tra <- cM.tra$overall['Accuracy']
cTab.tra; Accu.tra
predVal <- predict(A_model, kc.val, type='response')
Predict.val <- ifelse(predVal>=0.5, 1, 0)
cTab.val <- table(Actual=kc.val$Buy, Predict.val); cTab.val
cM.val <- confusionMatrix(t(cTab.val), positive='1'); cM.val
Accu.val <- cM.val$overall['Accuracy']
cTab.val; Accu.val
####################################################
## Logistic Regression(S_model)
####################################################
startModel <- glm(Buy~1, kc.tra, family=binomial)
summary(startModel)
s_Result <- step(startModel, direction='both', scope=All_var)
s_var <- as.formula(s_Result$call); s_var
S_model <- glm(s_var, kc.tra, family=binomial)
summary(S_model)
predTra <- predict(S_model, kc.tra, type='response')
Predict.tra <- ifelse(predTra>=0.5, 1, 0)
cTab.tra <- table(Actual=kc.tra$Buy, Predict.tra); cTab.tra
cM.tra <- confusionMatrix(t(cTab.tra), positive='1'); cM.tra
Accu.tra <- cM.tra$overall['Accuracy']
cTab.tra; Accu.tra
predVal <- predict(S_model, kc.val, type='response')
Predict.val <- ifelse(predVal>=0.5, 1, 0)
cTab.val <- table(Actual=kc.val$Buy, Predict.val); cTab.val
cM.val <- confusionMatrix(t(cTab.val), positive='1'); cM.val
Accu.val <- cM.val$overall['Accuracy']
cTab.val; Accu.val
rm(list=ls())
####################################################
## Data Preprocessing
####################################################
kc <- read.table('./KidCreative.csv', header=TRUE, sep=','); head(kc); dim(kc)
table(is.na(kc))
cn <- colnames(kc); cn
cn[length(cn)+1] <- cn[2]; cn
cn[length(cn)+1] <- cn[1]; cn
cn <- cn[c(-1,-2)]; cn
kc <- subset(kc, select=cn); head(kc)
colnames(kc)[ncol(kc)] <- 'idx'; head(kc)
library(splitstackshape)
pSeed <- 12345
set.seed(pSeed)
kc.tra <- stratified(kc, 'Buy', 0.6)
## ONLY TEST for STRATIFIED SAMPLING
kc.tra <- kc.tra[order(kc.tra$idx),]
kc.rest <- kc[kc$idx %in% kc.tra$idx,]
kc.rest <- kc.rest[order(kc.rest$idx),]
table(kc.tra$idx == kc.rest$idx)
table(kc.tra$Income == kc.rest$Income)
## ONLY TEST for STRATIFIED SAMPLING
kc.rest <- kc[! kc$idx %in% kc.tra$idx,]
kc.val <- stratified(kc.rest, 'Buy', 0.5)
kc.tes <- kc.rest[! kc.rest$idx %in% kc.val$idx,]
kc.tra <- subset(kc.tra, select=-c(idx)); head(kc.tra)
kc.val <- subset(kc.val, select=-c(idx)); head(kc.val)
kc.tes <- subset(kc.tes, select=-c(idx)); head(kc.tes)
## ONLY TEST for STRATIFIED SAMPLING
t <- table(kc.tra$Buy); t; t[1]/t[2]
t <- table(kc.val$Buy); t; t[1]/t[2]
t <- table(kc.tes$Buy); t; t[1]/t[2]
## ONLY TEST for STRATIFIED SAMPLING
####################################################
## Logistic Regression(A_model)
####################################################
#install.packages('caret')
#install.packages('e1071')
library(caret)
A_model <- glm(Buy~., kc.tra, family=binomial)
All_var <- formula(A_model);
summary(A_model)
predTra <- predict(A_model, kc.tra, type='response')
Predict.tra <- ifelse(predTra>=0.5, 1, 0)
cTab.tra <- table(Actual=kc.tra$Buy, Predict.tra); cTab.tra
cM.tra <- confusionMatrix(t(cTab.tra), positive='1'); cM.tra
Accu.tra <- cM.tra$overall['Accuracy']
cTab.tra; Accu.tra
predVal <- predict(A_model, kc.val, type='response')
Predict.val <- ifelse(predVal>=0.5, 1, 0)
cTab.val <- table(Actual=kc.val$Buy, Predict.val); cTab.val
cM.val <- confusionMatrix(t(cTab.val), positive='1'); cM.val
Accu.val <- cM.val$overall['Accuracy']
cTab.val; Accu.val
####################################################
## Logistic Regression(S_model)
####################################################
startModel <- glm(Buy~1, kc.tra, family=binomial)
summary(startModel)
s_Result <- step(startModel, direction='both', scope=All_var)
s_var <- as.formula(s_Result$call); s_var
S_model <- glm(s_var, kc.tra, family=binomial)
summary(S_model)
predTra <- predict(S_model, kc.tra, type='response')
Predict.tra <- ifelse(predTra>=0.5, 1, 0)
cTab.tra <- table(Actual=kc.tra$Buy, Predict.tra); cTab.tra
cM.tra <- confusionMatrix(t(cTab.tra), positive='1'); cM.tra
Accu.tra <- cM.tra$overall['Accuracy']
cTab.tra; Accu.tra
predVal <- predict(S_model, kc.val, type='response')
Predict.val <- ifelse(predVal>=0.5, 1, 0)
cTab.val <- table(Actual=kc.val$Buy, Predict.val); cTab.val
cM.val <- confusionMatrix(t(cTab.val), positive='1'); cM.val
Accu.val <- cM.val$overall['Accuracy']
cTab.val; Accu.val
rm(list=ls())
####################################################
## Data Preprocessing
####################################################
kc <- read.table('./KidCreative.csv', header=TRUE, sep=','); head(kc); dim(kc)
table(is.na(kc))
cn <- colnames(kc); cn
cn[length(cn)+1] <- cn[2]; cn
cn[length(cn)+1] <- cn[1]; cn
cn <- cn[c(-1,-2)]; cn
kc <- subset(kc, select=cn); head(kc)
colnames(kc)[ncol(kc)] <- 'idx'; head(kc)
####################################################
## Data Splitting
####################################################
#install.packages('splitstackshape')
library(splitstackshape)
pSeed <- 12345
set.seed(pSeed)
kc.tra <- stratified(kc, 'Buy', 0.6)
## ONLY TEST for STRATIFIED SAMPLING
kc.tra <- kc.tra[order(kc.tra$idx),]
View(kc.tra)
kc.rest <- kc[kc$idx %in% kc.tra$idx,]
kc.rest <- kc.rest[order(kc.rest$idx),]
table(kc.tra$idx == kc.rest$idx)
table(kc.tra$Income == kc.rest$Income)
rm(list=ls()
)
####################################################
## Data Preprocessing
####################################################
kc <- read.table('./KidCreative.csv', header=TRUE, sep=','); head(kc); dim(kc)
View(kc)
table(is.na(kc))
is.na(kc);
cn <- colnames(kc); cn
cn[length(cn)+1] <- cn[2]; cn
cn[length(cn)+1] <- cn[1]; cn
cn <- cn[c(-1,-2)]; cn
kc <- subset(kc, select=cn); head(kc)
colnames(kc)[ncol(kc)] <- 'idx'; head(kc)
####################################################
## Data Splitting
####################################################
#install.packages('splitstackshape')
library(splitstackshape)
pSeed <- 12345
set.seed(pSeed)
kc.tra <- stratified(kc, 'Buy', 0.6)
View(kc.tra)
## ONLY TEST for STRATIFIED SAMPLING
kc.tra <- kc.tra[order(kc.tra$idx),]
kc.rest <- kc[kc$idx %in% kc.tra$idx,]
View(kc.rest)
kc.rest <- kc[kc$idx %in% kc.tra$idx,]
kc.rest <- kc.rest[order(kc.rest$idx),]
table(kc.tra$idx == kc.rest$idx)
table(kc.tra$Income == kc.rest$Income)
kc.rest <- kc[! kc$idx %in% kc.tra$idx,]
kc.val <- stratified(kc.rest, 'Buy', 0.5)
kc.tes <- kc.rest[! kc.rest$idx %in% kc.val$idx,]
kc.tra <- subset(kc.tra, select=-c(idx)); head(kc.tra)
kc.val <- subset(kc.val, select=-c(idx)); head(kc.val)
kc.tes <- subset(kc.tes, select=-c(idx)); head(kc.tes)
## ONLY TEST for STRATIFIED SAMPLING
t <- table(kc.tra$Buy); t; t[1]/t[2]
t <- table(kc.val$Buy); t; t[1]/t[2]
t <- table(kc.tes$Buy); t; t[1]/t[2]
####################################################
## Logistic Regression(A_model)
####################################################
#install.packages('caret')
#install.packages('e1071')
library(caret)
A_model <- glm(Buy~., kc.tra, family=binomial)
All_var <- formula(A_model);
summary(A_model)
predTra <- predict(A_model, kc.tra, type='response')
predTra
Predict.tra <- ifelse(predTra>=0.5, 1, 0)
cTab.tra <- table(Actual=kc.tra$Buy, Predict.tra); cTab.tra
cM.tra <- confusionMatrix(t(cTab.tra), positive='1'); cM.tra
Accu.tra <- cM.tra$overall['Accuracy']
cTab.tra; Accu.tra
predVal <- predict(A_model, kc.val, type='response')
Predict.val <- ifelse(predVal>=0.5, 1, 0)
cTab.val <- table(Actual=kc.val$Buy, Predict.val); cTab.val
cM.val <- confusionMatrix(t(cTab.val), positive='1'); cM.val
Accu.val <- cM.val$overall['Accuracy']
cTab.val; Accu.val
####################################################
## Logistic Regression(S_model)
####################################################
startModel <- glm(Buy~1, kc.tra, family=binomial)
summary(startModel)
s_Result <- step(startModel, direction='both', scope=All_var)
s_var <- as.formula(s_Result$call); s_var
S_model <- glm(s_var, kc.tra, family=binomial)
summary(S_model)
predTra <- predict(S_model, kc.tra, type='response')
Predict.tra <- ifelse(predTra>=0.5, 1, 0)
cTab.tra <- table(Actual=kc.tra$Buy, Predict.tra); cTab.tra
cM.tra <- confusionMatrix(t(cTab.tra), positive='1'); cM.tra
Accu.tra <- cM.tra$overall['Accuracy']
cTab.tra; Accu.tra
predVal <- predict(S_model, kc.val, type='response')
Predict.val <- ifelse(predVal>=0.5, 1, 0)
cTab.val <- table(Actual=kc.val$Buy, Predict.val); cTab.val
cM.val <- confusionMatrix(t(cTab.val), positive='1'); cM.val
Accu.val <- cM.val$overall['Accuracy']
cTab.val; Accu.val
cM.tra <- confusionMatrix(t(cTab.tra), positive='1'); cM.tr
121/135
122/135
19/25
103/107
103/110
